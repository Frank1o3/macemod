plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.fabricmc.net' }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"macemod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"
    modApi "com.terraformersmc:modmenu:${project.modmenu_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// Task to copy the built jar to the Minecraft 'mods' folder defined by the MC_PATH environment variable
def mcPath = System.getenv('MC_PATH')
if (mcPath == null || mcPath.trim().isEmpty()) {
	logger.lifecycle("MC_PATH environment variable is not set; 'installToMc' task will be a no-op. Set MC_PATH to your .minecraft directory to enable automatic install.")
}

tasks.register('installToMc') {
	group = 'distribution'
	description = 'Copy the built mod jar to the MC_PATH\\mods folder (if MC_PATH env var is set)'

	doLast {
		if (mcPath == null || mcPath.trim().isEmpty()) {
			logger.lifecycle("Skipping installToMc: MC_PATH is not defined.")
			return
		}

		def modsDir = file(mcPath + File.separator + 'mods')
		if (!modsDir.exists()) {
			modsDir.mkdirs()
		}

		// The jar artifact produced by the 'jar' task will be in build/libs
		def libsDir = file("${buildDir}${File.separator}libs")
		if (!libsDir.exists()) {
			logger.lifecycle("No libs directory found at ${libsDir}; nothing to copy.")
			return
		}

		def jars = libsDir.listFiles().findAll { it.name.endsWith('.jar') }
		if (jars.isEmpty()) {
			logger.lifecycle("No jar files found in ${libsDir}; nothing to copy to ${modsDir}.")
			return
		}

		// Pick the most recently modified jar (the built artifact)
		def jarToCopy = jars.max { it.lastModified() }
		def dest = new File(modsDir, jarToCopy.name)
		jarToCopy.withInputStream { ins -> dest.withOutputStream { outs -> outs << ins } }
		logger.lifecycle("Copied ${jarToCopy.name} to ${modsDir}")
	}
}

// Ensure installToMc runs after build so the artifact exists
tasks.named('build') {
	finalizedBy tasks.named('installToMc')
}


// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}